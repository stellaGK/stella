#!/usr/bin/python3
import sys
import os, configparser
from pathlib import Path

# Stellapy package
sys.path.append(os.path.dirname(os.path.abspath(__file__)).split("stellapy/")[0])
from stellapy.utils.config.create_defaultConfigurationFile import create_defaultConfigurationFile
from stellapy.utils.decorators.exit_program import exit_program
from stellapy.utils.files.ensure_dir import ensure_dir

# Create a configuration object 
CONFIG = configparser.ConfigParser(allow_no_value=True)                                                   
CONFIG.optionxform = lambda option: option  # preserve case for letters

# Select the location of the configuration file 
divider = '\\' if (os.name == 'nt') else '/'
path_stellaGUI = os.path.dirname(os.path.abspath(__file__)).split("stellapy")[0]
NAME_CONFIGURATIONFILE = Path(path_stellaGUI+"/stellapy/stellapy.ini")  

#===============================================================================
#                 READ THE CONFIGURATION FILE STELLAPY.INI
#===============================================================================

def read_configurationFile():
    ''' Check whether <config.ini> exists, if not write it, CONFIG will be read after calling this function.
    Reading the file will check it existence and whether the paths are correct. '''
    
    # The configuration file has not been read
    if "GENERAL" not in CONFIG:
        CONFIG.read(NAME_CONFIGURATIONFILE)  
    
    # The configuration file didn't exist when it was read
    if "GENERAL" not in CONFIG:
        
        # Create the default configuration file
        create_defaultConfigurationFile(CONFIG, NAME_CONFIGURATIONFILE)
        exit_reason = "A default configuration file has been created.\n"
        exit_reason += "Please fill in stellapy/stellapy.ini. \n"
        exit_program(exit_reason, read_configurationFile, sys._getframe().f_lineno) 
    
    # The configuration file is already read
    if "GENERAL" in CONFIG:
        
        # Get the path to the current file
        path_currentFile = os.path.dirname(os.path.abspath(__file__))
        
        # Check whether the paths are set correctly
        if CONFIG['CODE']['Stella'] != path_currentFile.split("stellapy")[0] or \
           CONFIG['CODE']['Stellapy'] != path_currentFile.split("stellapy")[0]+"stellapy/":
            if "marconi" not in path_currentFile.split("stellapy")[0]:
                print("WARNING: The path to the stella folder was not set correctly. \n \
                       The configuration file will be replaced with a default configuration file. \n") 
                create_defaultConfigurationFile(CONFIG, NAME_CONFIGURATIONFILE)
                
        # Check whether the email is set
        if CONFIG['SUPERCOMPUTER']['Email'] == 'dummy_email@gmail.com':
            exit_reason = "The email address in [supercomputer] is missing. "
            exit_reason += "Fill in the stellapy/stellapy.ini configuration file. \n"
            exit_program(exit_reason, read_configurationFile, sys._getframe().f_lineno) 
            
    # Check whether the GUI path exists
    if not os.path.isdir(CONFIG["PATHS"]["GUI"]):
        exit_reason = "Set up a path to save the data generated by the GUI. \n"
        exit_reason += "The set path: '"+str(CONFIG["PATHS"]["GUI"])+"' does not exist. \n" 
        exit_reason += "Either change the path or create the folder. \n" 
        exit_program(exit_reason, read_configurationFile, sys._getframe().f_lineno) 
            
    # Create extra paths 
    CONFIG["PATHS"]["GUI_Figures"] = CONFIG["PATHS"]["GUI"]  
    CONFIG["PATHS"]["GUI_Pickles"] = CONFIG["PATHS"]["GUI"] + "/Pickles"
    ensure_dir(CONFIG["PATHS"]["GUI_Pickles"])

#------------------------------    
def write_configurationFile():
    ''' Write the configuration file. '''
    with open(NAME_CONFIGURATIONFILE, 'w') as configfile:
        CONFIG.write(configfile)

#------------------------------      
def check_pathsToCodeAndSimulations():
    ''' Check whether the paths in the configuration file point to the code. '''
    read_configurationFile()
    return

#===============================================
# MAIN SCRIPT
#===============================================
read_configurationFile()

