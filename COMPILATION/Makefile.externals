####################################################################
#                                                                  #
#                         EXTERNAL MODULES                         #
#                                                                  #
####################################################################
# 
# Stella uses the following external modules:
#		- mini_libstell
#		- utils/*
#		- git_version
#		- neasyf
#		- pFunit
#  
# Note that the automated Fortran tests use the external module 
# 'pFunit' which is processed in AUTOMATIC_TESTS/test_fortran_routines/Makefile
# 
####################################################################

#===================================================================
#                      RELEVANT MAKE COMMANDS                      #
#===================================================================
#
# In a static library, the modules are bound into the executable file before execution. 
# Static libraries are commonly named libname.a. The .a suffix refers to archive.  
#
# A Makefile consists of a set of rules. A rule generally looks like this:
# 
# 		targets: prerequisites
# 			command
# 			command
# 			command
# 
# - The targets are file names, separated by spaces. Typically, there is only one per rule.
# - The commands are a series of steps typically used to make the target(s). 
#   These need to start with a tab character, not spaces.
# - The prerequisites are also file names, separated by spaces. These files need to 
#   exist before the commands for the target are run. These are also called dependencies.
# - When we run a target, 'make' will only run it, if the target doesn't exist, or if the
#   prerequisites are newer than the target
#
# Automatic variables
# 	$@ is the name of the target being generated 
# 	$^ are all the prerequisites  
# 	$< is the first prerequisite 
# 	$? are all the prerequisites newer than the target
#
# Compiler options
# 	-o is a compiler option that specifies the name of the output file
# 	-c is a compiler option that tells the compiler to generate an object file
# 
# See https://makefiletutorial.com/ for a quick intro into 'make'.
#
#===================================================================


#===================================================================
#                            DIRECTORIES                           #
#===================================================================
# In 'Makefile' we already defined:
# 		PROJECT_DIR  
# 		STELLA_DIR  
# 		EXTERNALS_DIR  
# 		BUILD_DIR  
# 		COMPILATION_DIR 
#  
# Here we need to define the directories of the external libraries
# 		MINILIBSTELL_DIR
# 		UTILS_DIR
# 		GIT_VERSION_DIR
# 		NEASYF_DIR
#===================================================================

# Define the directories where the external libraries are located 
# Export UTILS_DIR and MINILIBSTELL_DIR because they're used in their make files
export MINILIBSTELL_DIR := $(EXTERNALS_DIR)/mini_libstell
export UTILS_DIR := $(EXTERNALS_DIR)/utils
export GIT_VERSION_DIR := $(EXTERNALS_DIR)/git_version/src
export NEASYF_DIR := $(EXTERNALS_DIR)/neasyf/src

# Check directories
.PHONY: print-directories-externals
print-directories-externals:
	@echo "          " 
	@echo "Directories of external libraries:"  
	@echo "   - $(NEASYF_DIR)/neasyf.a)"
	@echo "   - $(GIT_VERSION_DIR)/git_version.a)"
	@echo "          " 
	
#===================================================================
#                             EXTERNALS                            #
#===================================================================

# utils  
include $(COMPILATION_DIR)/Makefile.externals.utils

# mini_libstell  
include $(COMPILATION_DIR)/Makefile.externals.mini_libstell

# neasyf (git submodule)
include $(COMPILATION_DIR)/Makefile.externals.neasyf

# Git version (git submodule)
include $(COMPILATION_DIR)/Makefile.externals.git_version

# FORD automatic documentation
#    >> make doc
include $(COMPILATION_DIR)/Makefile.externals.FORD

#===================================================================
#                  DOWNLOAD GIT SUBMODULES MANUALLY                #
#===================================================================

# Download the submodules manually through 'make submodules'
submodules:
	@echo "  "; echo "Downloading submodules:"
	git submodule update --init --recursive 
	@echo "  "
 

