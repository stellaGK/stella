# The "stella_all" target will first make the "modules" target and then the "stella" target
# Here "modules" will make "utils_all" and then "mini_libstell_all"
stella_all: modules stella

# undefined reference to `get_git_state` or `get_git_hash`? You need to manually
# add a dependency of the affected binary on `$(OBJDIR)/git_version_impl.o` like
# below. This file needs to be first in the list of dependencies so that the
# file that needs the functions can find them. Yes this is unpleasant, no we
# (probably?) can`t automate this like for the other dependencies. `fortdep`
# doesn't understand Fortran submodules, so can't pick this up

# "stella_mod" is defined in the Makefile.depend file, and contains all its dependencies
stella: git_version_impl.o $(stella_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

stella.x: git_version_impl.o $(stella_mod)
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

automated-fortran-tests: git_version_impl.o
	$(LD) $(LDFLAGS) -o $@ $^ $(LIBS)

# Create phony targets "modules", "utils_all" and "mini_libstell_all"
.PHONY: modules utils_all mini_libstell_all

# When we call the target "modules" we want to gather/compile two submodules: "utils_all" and "mini_libstell_all"
modules: utils_all mini_libstell_all

# Gather the <utils> scripts
utils_all: utils.a
UTIL_OBJ = spl.o constants.o file_utils.o netcdf_utils.o command_line.o
utils.a: $(UTIL_OBJ)
	$(ARCH) $(ARCHFLAGS) $@ $^
	$(RANLIB) $@

# Compile <mini_libstell>
mini_libstell_all: mini_libstell.a
mini_libstell.a:
	$(MAKE) -C $(UTILS)/mini_libstell

# Remove the executable
distclean:
	-rm -f stella stella.x


